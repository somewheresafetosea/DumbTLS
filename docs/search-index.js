var searchIndex = JSON.parse('{\
"dumbtls":{"doc":"DumbTLS DumbTLS is intended as a tool to help explain the…","i":[[0,"bytes","dumbtls","Utilities for manipulating raw bytes within memory, and…",null,null],[3,"XorLengthError","dumbtls::bytes","Error returned if the user tries to xor two byte sequences…",null,null],[6,"Bytes","","The `Bytes` type represents an arbitrarily long sequence…",null,null],[8,"SequenceXor","","Trait for sequences of bytes that can be xor\'d with other…",null,null],[10,"xor","","Xor this sequence of bytes with `other`.",0,[[],[["vec",3],["result",4],["xorlengtherror",3]]]],[0,"ciphers","dumbtls","Implementations of various cryptographic ciphers.",null,null],[0,"aes","dumbtls::ciphers","Implementation of AES-128.",null,null],[3,"AES","dumbtls::ciphers::aes","The AES Cipher.",null,null],[12,"key","","",1,null],[4,"AESError","","Error encountered during AES encryption/decryption.",null,null],[13,"IncorrectBlocksize","","Returned if the block to be encrypted is not 16 bytes.",2,null],[4,"AESKeysize","","Represents possible keysizes for use with AES.",null,null],[13,"Key128Bit","","",3,null],[4,"AESKey","","Contains an AES key.",null,null],[13,"Key128Bit","","",4,null],[5,"keysize_to_len","","Converts a keysize to the length a key of that keysize…",null,[[["aeskeysize",4]]]],[5,"key_to_len","","Converts a key to the length it should be, in bytes.",null,[[["aeskey",4]]]],[11,"new","","",1,[[["aeskey",4]],["aes",3]]],[11,"get_num_rounds","","Get the number of rounds of encryption/decryption to…",1,[[]]],[11,"s_box","","Apply the AES S-Box to `byte`.",1,[[]]],[11,"byte_substitution","","Apply the AES Byte Substitution layer.",1,[[["bytes",6]],["bytes",6]]],[11,"inverse_byte_substitution","","Apply the AES Inverse Byte Substitution layer.",1,[[["bytes",6]],["bytes",6]]],[11,"shift_rows","","Apply the AES Shift Rows layer.",1,[[["bytes",6]],["bytes",6]]],[11,"poly_mult_2","","Multiply a polynomial by $x$ in $GF(2^8)$.",1,[[]]],[11,"poly_mult_3","","Multiply a polynomial by $x + 1$ in $GF(2^8)$.",1,[[]]],[11,"poly_mult_9","","Multiply a polynomial by $x^3 + 1$ in $GF(2^8)$.",1,[[]]],[11,"poly_mult_b","","Multiply a polynomial by $x^3 + x + 1$ in $GF(2^8)$.",1,[[]]],[11,"poly_mult_d","","Multiply a polynomial by $x^3 + x^2 + 1$ in $GF(2^8)$.",1,[[]]],[11,"poly_mult_e","","Multiply a polynomial by $x^3 + x^2 + x$ in $GF(2^8)$.",1,[[]]],[11,"mix_columns","","Apply the AES Mix Columns layer.",1,[[["bytes",6]],["bytes",6]]],[11,"inverse_mix_columns","","Apply the AES Inverse Mix Columns layer.",1,[[["bytes",6]],["bytes",6]]],[11,"get_round_constant","","Get the AES Round Constant.",1,[[]]],[11,"key_schedule_round_function","","Apply the AES Key Schedule Round Function.",1,[[],["bytes",6]]],[11,"generate_key_schedule","","Generate the AES Key Schedule for the number of required…",1,[[],[["vec",3],["bytes",6]]]],[0,"block","dumbtls::ciphers","Modes of operation for symmetric block ciphers.",null,null],[3,"ECBMode","dumbtls::ciphers::block","Electronic CodeBook mode for block ciphers.",null,null],[12,"cipher","","Block cipher to use for encryption/decryption.",5,null],[12,"padding","","Padding scheme with which to pad the plaintext for…",5,null],[3,"CBCMode","","Cipher Block Chaining mode for block ciphers.",null,null],[12,"cipher","","Block cipher to use for encryption/decryption.",6,null],[12,"padding","","Padding scheme with which to pad the plaintext for…",6,null],[8,"BlockCipher","","Trait for a generic block cipher.",null,null],[16,"Error","","Error type returned when this cipher encounters an error.",7,null],[10,"get_block_size","","Retrieve the block size of the cipher, in bytes.",7,[[["bytes",6]]]],[10,"encrypt_block","","Encrypt the given plaintext.",7,[[["bytes",6]],[["bytes",6],["result",4]]]],[10,"decrypt_block","","Decrypt the given plaintext.",7,[[["bytes",6]],[["bytes",6],["result",4]]]],[11,"new","","Create a new instance of the struct using the given cipher…",5,[[],[["ecbmode",3],["pkcs7",3]]]],[11,"with_padding","","Create a new instance of the struct using the given cipher…",5,[[],["ecbmode",3]]],[11,"encrypt","","Encrypt the given plaintext in ECB mode.",5,[[["bytes",6]],[["bytes",6],["result",4]]]],[11,"decrypt","","Decrypt the given ciphertext in ECB mode.",5,[[["bytes",6]],[["bytes",6],["result",4]]]],[11,"new","","Create a new instance of the struct using the given cipher…",6,[[],[["cbcmode",3],["pkcs7",3]]]],[11,"with_padding","","Create a new instance of the struct using the given cipher…",6,[[],["cbcmode",3]]],[11,"encrypt","","Encrypt the given plaintext in CBC mode.",6,[[["bytes",6]],[["bytes",6],["result",4]]]],[11,"decrypt","","Decrypt the given ciphertext in CBC mode.",6,[[["bytes",6]],[["bytes",6],["result",4]]]],[0,"des","dumbtls::ciphers","Implementation of DES.",null,null],[3,"DESBlock","dumbtls::ciphers::des","DES internal block ciper.",null,null],[12,"key","","",8,null],[6,"DES","","DES cipher",null,null],[11,"new","","Create a new instance of the DES cipher.",9,[[["bytes",6]],["des",6]]],[11,"get_bit","","Get a given bit\'s value (0 or 1) from an integer.",8,[[]]],[11,"map_bits","","Maps the bits of a collection of Bytes to new locations.",8,[[["bytes",6]]]],[11,"initial_permutation","","Perform the initial permutation on plaintext, prior to…",8,[[["bytes",6]]]],[11,"final_permutation","","Perform the final permutation on ciphertext, after having…",8,[[["bytes",6]]]],[11,"permuted_choice_1","","Perform permuted choice 1, to initialise the key, before…",8,[[]]],[11,"rotate_key_left","","Rotate the two halves of the key one place left.",8,[[["bytes",6]],["bytes",6]]],[11,"permuted_choice_2","","Perform permuted choice 2 to derive a round subkey.",8,[[],["bytes",6]]],[11,"half_block_expansion","","Expand the right hand side, for use in the round function.",8,[[["bytes",6]]]],[11,"six_byte_split","","Splits 6 8-bit bytes into 8 6-bit bytes.",8,[[["bytes",6]],["bytes",6]]],[11,"apply_s_box","","Applies an S-box to convert a 6-bit byte to a 4-bit byte.",8,[[]]],[11,"apply_p_box","","Apply permutation at the end of the round function.",8,[[["bytes",6]]]],[0,"feistel","dumbtls::ciphers","Traits and structs for implementing ciphers built around…",null,null],[3,"FeistelNetwork","dumbtls::ciphers::feistel","Feistel Network implementation",null,null],[12,"cipher","","Cipher to use, should be an instance of [`FeistelCipher`].",10,null],[4,"FeistelCipherError","","Errors encountered while encrypting/decrypting using a…",null,null],[13,"InvalidBlock","","The cipher in used decided the provided block was invalid…",11,null],[13,"InvalidKey","","The cipher in used decided the provided key was invalid…",11,null],[13,"SubkeyDerivation","","There was an error in deriving the subkey for some round.",11,null],[13,"RoundFunction","","There was an error in the round function for some round.",11,null],[13,"GenericDecryptionError","","There was a generic error according to the cipher.",11,null],[13,"XorError","","Tried to XOR two byte strings of different lengths.",11,null],[6,"FeistelResult","","",null,null],[8,"FeistelCipher","","Trait for ciphers which work using a Feistel network.",null,null],[10,"get_num_rounds","","Get the number of rounds to perform.",12,[[["bytes",6]]]],[10,"get_block_size","","Get the block size used by the cipher.",12,[[["bytes",6]]]],[10,"derive_round_subkey","","Derive the subkey for a given round.",12,[[],[["bytes",6],["feistelresult",6]]]],[10,"round_function","","Perform the round function, and return the data to be…",12,[[["bytes",6]],[["bytes",6],["feistelresult",6]]]],[11,"pre_encrypt_block","","Perfom any transformations to the plaintext that are…",12,[[["bytes",6]]]],[10,"is_valid_plaintext_block","","Retuns an error if the plaintext is invalid.",12,[[["bytes",6]],["feistelresult",6]]],[10,"split_plaintext","","Split the plaintext into left and right hand sides.",12,[[["bytes",6]]]],[11,"post_encrypt_block","","Perform any transformations to the ciphertext that are…",12,[[["bytes",6]]]],[11,"pre_decrypt_block","","Perfom any transformations to the ciphertext that are…",12,[[["bytes",6]]]],[10,"is_valid_ciphertext_block","","Returns an error if the ciphertext is invalid.",12,[[["bytes",6]],["feistelresult",6]]],[10,"split_ciphertext","","Split the ciphertext into left and right hand sides.",12,[[["bytes",6]]]],[11,"post_decrypt_block","","Perfom any transformations to the plaintext that are…",12,[[["bytes",6]]]],[11,"from_cipher","","Create a new instance of `FeistelNetwork` from the given…",10,[[],["feistelnetwork",3]]],[11,"run_network","","Runs the Feistel Network round iteration.",10,[[["bytes",6]],[["bytes",6],["feistelresult",6]]]],[0,"rsa","dumbtls::ciphers","RSA encryption/decryption primitives.",null,null],[3,"RSAPrivateKey","dumbtls::ciphers::rsa","Represents an RSA private key.",null,null],[12,"n","","",13,null],[12,"d","","",13,null],[12,"size","","",13,null],[3,"RSAPublicKey","","Represents an RSA public key.",null,null],[12,"n","","",14,null],[12,"e","","",14,null],[12,"size","","",14,null],[3,"RSAKeypair","","Represents an RSA keypair (public & private).",null,null],[12,"public","","",15,null],[12,"private","","",15,null],[4,"RSAKeysize","","Represents the size of an RSA key.",null,null],[13,"Key512Bit","","",16,null],[13,"Key1024Bit","","",16,null],[13,"Key2048Bit","","",16,null],[13,"Key3072Bit","","",16,null],[13,"Key4096Bit","","",16,null],[4,"RSAError","","Errors that can occur while attempting to perform RSA.",null,null],[13,"IntTooLarge","","Occurs when trying to convert an integer to bytes, and the…",17,null],[13,"MessageOutOfRange","","Occurs if the message is greater than the key modulus.",17,null],[13,"CiphertextOutOfRange","","Occurs if the ciphertext is greater than the key modulus.",17,null],[13,"SignatureOutOfRange","","Occurs if the signature is greater than the key modulus.",17,null],[5,"keysize_map","","Maps RSA keysizes to the length of the modulus, in bytes.",null,[[["rsakeysize",4]]]],[5,"integer_to_bytes","","Convert an integer to a sequence of octets.",null,[[["integer",3]],[["rsaresult",6],["bytes",6]]]],[5,"bytes_to_integer","","Convert a sequence of octets to an integer.",null,[[["bytes",6]],["integer",3]]],[5,"encrypt_int","","Encrypt an integer with the given RSA public key.",null,[[["integer",3]],[["integer",3],["rsaresult",6]]]],[5,"decrypt_int","","Decrypt an integer with the given RSA private key.",null,[[["integer",3]],[["integer",3],["rsaresult",6]]]],[5,"sign_int","","Sign an integer with the given RSA private key.",null,[[["integer",3],["rsaprivatekey",3]],[["integer",3],["rsaresult",6]]]],[5,"verify_sig_int","","Verify an integer has been signed by a given RSA private…",null,[[["integer",3],["rsapublickey",3]],[["integer",3],["rsaresult",6]]]],[6,"RSAResult","","",null,null],[8,"RSAKey","","Trait for types which contain RSA keys.",null,null],[10,"get_modulus","","Get the (always public) modulus stored in the key.",18,[[],["integer",3]]],[10,"get_exponent","","Get the (public or private) exponent stored in the key.",18,[[],["integer",3]]],[10,"get_size","","Get the size of the modulus.",18,[[],["rsakeysize",4]]],[10,"get_size_bytes","","Get the size of the modulus, in bytes",18,[[]]],[0,"oaep","dumbtls::ciphers","Implementation of RSAES-OAEP (RSA with Optimal Asymmetric…",null,null],[3,"OAEPBlock","dumbtls::ciphers::oaep","",null,null],[12,"label","","",19,null],[12,"seed","","",19,null],[12,"key","","",19,null],[12,"hash_function","","",19,null],[12,"mask_generator","","",19,null],[3,"MGF1","","",null,null],[6,"OAEP","","",null,null],[8,"MaskGenerationFunction","","",null,null],[10,"generate_mask","","",20,[[["bytes",6]],[["rsaresult",6],["bytes",6]]]],[11,"new","dumbtls::ciphers::feistel","",10,[[],[["oaep",6],["sha2",3],["mgf1",3]]]],[11,"new","dumbtls::ciphers::oaep","",21,[[],[["oaep",6],["sha2",3],["mgf1",3]]]],[0,"encoding","dumbtls","This module contains traits for working with common…",null,null],[0,"base64","dumbtls::encoding","Traits for encoding/decoding base64 data.",null,null],[4,"DecodeError","dumbtls::encoding::base64","Represents an error encountered while decoding a base64…",null,null],[13,"InvalidByte","","An invalid byte was found in the input. The offset and…",22,null],[13,"InvalidLength","","The length of the input is invalid.",22,null],[13,"InvalidLastSymbol","","The last non-padding input symbol\'s encoded 6 bits have…",22,null],[4,"CharacterSet","","Available encoding character sets",null,null],[13,"Standard","","The standard character set (uses `+` and `/`).",23,null],[13,"UrlSafe","","The URL safe character set (uses `-` and `_`).",23,null],[13,"Crypt","","The `crypt(3)` character set (uses…",23,null],[13,"Bcrypt","","The bcrypt character set (uses…",23,null],[13,"ImapMutf7","","The character set used in IMAP-modified UTF-7 (uses `+`…",23,null],[13,"BinHex","","The character set used in BinHex 4.0 files.",23,null],[3,"Config","","Contains configuration parameters for base64 encoding",null,null],[0,"mappings","","This module contains a number of common mappings used for…",null,null],[17,"BCRYPT","dumbtls::encoding::base64::mappings","Bcrypt character set",null,null],[17,"BINHEX","","BinHex character set",null,null],[17,"CRYPT","","As per `crypt(3)` requirements",null,null],[17,"IMAP_MUTF7","","IMAP modified UTF-7 requirements",null,null],[17,"STANDARD","","Standard character set with padding.",null,null],[17,"STANDARD_NO_PAD","","Standard character set without padding.",null,null],[17,"URL_SAFE","","URL-safe character set with padding",null,null],[17,"URL_SAFE_NO_PAD","","URL-safe character set without padding",null,null],[8,"FromBase64","dumbtls::encoding::base64","Implemented for types which can be instantiated from…",null,null],[10,"from_base64","","Create a new instance of the type implementing this trait…",24,[[],[["result",4],["decodeerror",4]]]],[10,"from_base64_config","","Create a new instance of the type implementing this trait…",24,[[["config",3]],[["result",4],["decodeerror",4]]]],[8,"ToBase64","","Implemented for types which contain raw bytes, and can…",null,null],[10,"to_base64","","Encode the data contained within the type as standard…",25,[[],["string",3]]],[10,"to_base64_config","","Encode the data contained within the type as base64, using…",25,[[["config",3]],["string",3]]],[0,"hex","dumbtls::encoding","Traits for encoding/decoding hex data.",null,null],[4,"DecodeError","dumbtls::encoding::hex","Represents an error encountered while decoding a hex…",null,null],[13,"InvalidHexCharacter","","An invalid character was found. Valid ones are: `0...9`,…",26,null],[12,"c","dumbtls::encoding::hex::DecodeError","",27,null],[12,"index","","",27,null],[13,"OddLength","dumbtls::encoding::hex","A hex string\'s length needs to be even, as two digits…",26,null],[13,"InvalidStringLength","","If the hex string is decoded into a fixed sized container,…",26,null],[8,"FromHex","","Implemented for types which can be instantiated from…",null,null],[10,"from_hex","","Create a new instance of the type implementing this trait…",28,[[],[["result",4],["decodeerror",4]]]],[8,"ToHex","","Implemented for types which contain raw bytes, and can…",null,null],[10,"to_hex","","Encode the data contained within the type as lower-case hex.",29,[[],["string",3]]],[10,"to_hex_upper","","Encode the data contained within the type as upper-case hex.",29,[[],["string",3]]],[0,"hashes","dumbtls","",null,null],[0,"sha1","dumbtls::hashes","",null,null],[3,"Sha1","dumbtls::hashes::sha1","",null,null],[0,"sha2","dumbtls::hashes","",null,null],[3,"Sha224","dumbtls::hashes::sha2","The SHA-256 hash algorithm with the SHA-224 initial hash…",null,null],[3,"Sha256","","The SHA-256 hash algorithm with the SHA-256 initial hash…",null,null],[3,"Sha384","","The SHA-512 hash algorithm with the SHA-384 initial hash…",null,null],[3,"Sha512","","The SHA-512 hash algorithm with the SHA-512 initial hash…",null,null],[3,"Sha512Trunc224","","The SHA-512 hash algorithm with the SHA-512/224 initial…",null,null],[3,"Sha512Trunc256","","The SHA-512 hash algorithm with the SHA-512/256 initial…",null,null],[8,"Digest","","The `Digest` trait specifies an interface common for…",null,null],[16,"OutputSize","","Output size for `Digest`",30,null],[10,"new","","Create new hasher instance",30,[[]]],[10,"update","","Digest data, updating the internal state.",30,[[]]],[10,"chain","","Digest input data in a chained manner.",30,[[]]],[10,"finalize","","Retrieve result and consume hasher instance.",30,[[],["genericarray",3]]],[10,"finalize_reset","","Retrieve result and reset hasher instance.",30,[[],["genericarray",3]]],[10,"reset","","Reset hasher instance to its initial state.",30,[[]]],[10,"output_size","","Get output size of the hasher",30,[[]]],[10,"digest","","Convenience function to compute hash of the `data`. It…",30,[[],["genericarray",3]]],[3,"Sha2","","",null,null],[12,"hasher","","",31,null],[8,"HashFunction","dumbtls::hashes","",null,null],[10,"hash","","",32,[[["bytes",6]],["bytes",6]]],[10,"output_size","","",32,[[]]],[10,"max_input_size","","",32,[[]]],[0,"keygen","dumbtls","Functions for generating keys for use in ciphers.",null,null],[5,"gen_key_des","dumbtls::keygen","Generate a key for use in DES encryption/decryption.",null,[[],["bytes",6]]],[5,"gen_key_aes","","Generate a key for use in AES encryption/decryption..",null,[[["aeskeysize",4]],["aeskey",4]]],[5,"gen_aes_iv","","Generate an IV for use with AES.",null,[[],["bytes",6]]],[5,"gen_odd","","Generate a random odd number of size `num_bytes`.",null,[[],["integer",3]]],[5,"gen_prime","","Generate a random prime number of size `num_bytes`.",null,[[],["integer",3]]],[5,"gen_key_rsa","","Generate an RSA keypair of the desired size.",null,[[["rsakeysize",4]],["rsakeypair",3]]],[0,"padding","dumbtls","Utilities for adding/removing padding from bytes.",null,null],[3,"PKCS7","dumbtls::padding","",null,null],[3,"NULL","","",null,null],[0,"null","","Functions for adding/removing null-byte padding.",null,null],[5,"pad","dumbtls::padding::null","Pad the given content using null bytes.",null,[[["bytes",6]]]],[5,"unpad","","Remove null padding from the given content.",null,[[["bytes",6]]]],[0,"pkcs7","dumbtls::padding","Functions for adding/removing padding according to the…",null,null],[3,"InvalidPadding","dumbtls::padding::pkcs7","Represents an error encountered when trying to remove…",null,null],[5,"pad","","Pad the given content using PKCS #7.",null,[[["bytes",6]]]],[5,"unpad","","Remnove PKCS #7 padding from the given content.",null,[[["bytes",6]],[["result",4],["invalidpadding",3]]]],[8,"PaddingScheme","dumbtls::padding","",null,null],[10,"pad","","",33,[[["bytes",6]]]],[10,"unpad","","",33,[[["bytes",6]]]],[11,"from","dumbtls::bytes","",34,[[]]],[11,"into","","",34,[[]]],[11,"to_owned","","",34,[[]]],[11,"clone_into","","",34,[[]]],[11,"to_string","","",34,[[],["string",3]]],[11,"try_from","","",34,[[],["result",4]]],[11,"try_into","","",34,[[],["result",4]]],[11,"borrow","","",34,[[]]],[11,"borrow_mut","","",34,[[]]],[11,"type_id","","",34,[[],["typeid",3]]],[11,"checked_as","","",34,[[],["option",4]]],[11,"az","","",34,[[]]],[11,"wrapping_as","","",34,[[]]],[11,"saturating_as","","",34,[[]]],[11,"overflowing_as","","",34,[[]]],[11,"vzip","","",34,[[]]],[11,"from","dumbtls::ciphers::aes","",1,[[]]],[11,"into","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"checked_as","","",1,[[],["option",4]]],[11,"az","","",1,[[]]],[11,"wrapping_as","","",1,[[]]],[11,"saturating_as","","",1,[[]]],[11,"overflowing_as","","",1,[[]]],[11,"vzip","","",1,[[]]],[11,"from","","",2,[[]]],[11,"into","","",2,[[]]],[11,"to_owned","","",2,[[]]],[11,"clone_into","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"checked_as","","",2,[[],["option",4]]],[11,"az","","",2,[[]]],[11,"wrapping_as","","",2,[[]]],[11,"saturating_as","","",2,[[]]],[11,"overflowing_as","","",2,[[]]],[11,"vzip","","",2,[[]]],[11,"from","","",3,[[]]],[11,"into","","",3,[[]]],[11,"to_owned","","",3,[[]]],[11,"clone_into","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"checked_as","","",3,[[],["option",4]]],[11,"az","","",3,[[]]],[11,"wrapping_as","","",3,[[]]],[11,"saturating_as","","",3,[[]]],[11,"overflowing_as","","",3,[[]]],[11,"vzip","","",3,[[]]],[11,"from","","",4,[[]]],[11,"into","","",4,[[]]],[11,"to_owned","","",4,[[]]],[11,"clone_into","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_into","","",4,[[],["result",4]]],[11,"borrow","","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"checked_as","","",4,[[],["option",4]]],[11,"az","","",4,[[]]],[11,"wrapping_as","","",4,[[]]],[11,"saturating_as","","",4,[[]]],[11,"overflowing_as","","",4,[[]]],[11,"vzip","","",4,[[]]],[11,"from","dumbtls::ciphers::block","",5,[[]]],[11,"into","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"try_into","","",5,[[],["result",4]]],[11,"borrow","","",5,[[]]],[11,"borrow_mut","","",5,[[]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"checked_as","","",5,[[],["option",4]]],[11,"az","","",5,[[]]],[11,"wrapping_as","","",5,[[]]],[11,"saturating_as","","",5,[[]]],[11,"overflowing_as","","",5,[[]]],[11,"vzip","","",5,[[]]],[11,"from","","",6,[[]]],[11,"into","","",6,[[]]],[11,"try_from","","",6,[[],["result",4]]],[11,"try_into","","",6,[[],["result",4]]],[11,"borrow","","",6,[[]]],[11,"borrow_mut","","",6,[[]]],[11,"type_id","","",6,[[],["typeid",3]]],[11,"checked_as","","",6,[[],["option",4]]],[11,"az","","",6,[[]]],[11,"wrapping_as","","",6,[[]]],[11,"saturating_as","","",6,[[]]],[11,"overflowing_as","","",6,[[]]],[11,"vzip","","",6,[[]]],[11,"from","dumbtls::ciphers::des","",8,[[]]],[11,"into","","",8,[[]]],[11,"try_from","","",8,[[],["result",4]]],[11,"try_into","","",8,[[],["result",4]]],[11,"borrow","","",8,[[]]],[11,"borrow_mut","","",8,[[]]],[11,"type_id","","",8,[[],["typeid",3]]],[11,"checked_as","","",8,[[],["option",4]]],[11,"az","","",8,[[]]],[11,"wrapping_as","","",8,[[]]],[11,"saturating_as","","",8,[[]]],[11,"overflowing_as","","",8,[[]]],[11,"vzip","","",8,[[]]],[11,"from","dumbtls::ciphers::feistel","",10,[[]]],[11,"into","","",10,[[]]],[11,"try_from","","",10,[[],["result",4]]],[11,"try_into","","",10,[[],["result",4]]],[11,"borrow","","",10,[[]]],[11,"borrow_mut","","",10,[[]]],[11,"type_id","","",10,[[],["typeid",3]]],[11,"checked_as","","",10,[[],["option",4]]],[11,"az","","",10,[[]]],[11,"wrapping_as","","",10,[[]]],[11,"saturating_as","","",10,[[]]],[11,"overflowing_as","","",10,[[]]],[11,"vzip","","",10,[[]]],[11,"from","","",11,[[]]],[11,"into","","",11,[[]]],[11,"to_owned","","",11,[[]]],[11,"clone_into","","",11,[[]]],[11,"try_from","","",11,[[],["result",4]]],[11,"try_into","","",11,[[],["result",4]]],[11,"borrow","","",11,[[]]],[11,"borrow_mut","","",11,[[]]],[11,"type_id","","",11,[[],["typeid",3]]],[11,"checked_as","","",11,[[],["option",4]]],[11,"az","","",11,[[]]],[11,"wrapping_as","","",11,[[]]],[11,"saturating_as","","",11,[[]]],[11,"overflowing_as","","",11,[[]]],[11,"vzip","","",11,[[]]],[11,"from","dumbtls::ciphers::rsa","",13,[[]]],[11,"into","","",13,[[]]],[11,"to_owned","","",13,[[]]],[11,"clone_into","","",13,[[]]],[11,"try_from","","",13,[[],["result",4]]],[11,"try_into","","",13,[[],["result",4]]],[11,"borrow","","",13,[[]]],[11,"borrow_mut","","",13,[[]]],[11,"type_id","","",13,[[],["typeid",3]]],[11,"checked_as","","",13,[[],["option",4]]],[11,"az","","",13,[[]]],[11,"wrapping_as","","",13,[[]]],[11,"saturating_as","","",13,[[]]],[11,"overflowing_as","","",13,[[]]],[11,"vzip","","",13,[[]]],[11,"from","","",14,[[]]],[11,"into","","",14,[[]]],[11,"to_owned","","",14,[[]]],[11,"clone_into","","",14,[[]]],[11,"try_from","","",14,[[],["result",4]]],[11,"try_into","","",14,[[],["result",4]]],[11,"borrow","","",14,[[]]],[11,"borrow_mut","","",14,[[]]],[11,"type_id","","",14,[[],["typeid",3]]],[11,"checked_as","","",14,[[],["option",4]]],[11,"az","","",14,[[]]],[11,"wrapping_as","","",14,[[]]],[11,"saturating_as","","",14,[[]]],[11,"overflowing_as","","",14,[[]]],[11,"vzip","","",14,[[]]],[11,"from","","",15,[[]]],[11,"into","","",15,[[]]],[11,"to_owned","","",15,[[]]],[11,"clone_into","","",15,[[]]],[11,"try_from","","",15,[[],["result",4]]],[11,"try_into","","",15,[[],["result",4]]],[11,"borrow","","",15,[[]]],[11,"borrow_mut","","",15,[[]]],[11,"type_id","","",15,[[],["typeid",3]]],[11,"checked_as","","",15,[[],["option",4]]],[11,"az","","",15,[[]]],[11,"wrapping_as","","",15,[[]]],[11,"saturating_as","","",15,[[]]],[11,"overflowing_as","","",15,[[]]],[11,"vzip","","",15,[[]]],[11,"from","","",16,[[]]],[11,"into","","",16,[[]]],[11,"to_owned","","",16,[[]]],[11,"clone_into","","",16,[[]]],[11,"try_from","","",16,[[],["result",4]]],[11,"try_into","","",16,[[],["result",4]]],[11,"borrow","","",16,[[]]],[11,"borrow_mut","","",16,[[]]],[11,"type_id","","",16,[[],["typeid",3]]],[11,"checked_as","","",16,[[],["option",4]]],[11,"az","","",16,[[]]],[11,"wrapping_as","","",16,[[]]],[11,"saturating_as","","",16,[[]]],[11,"overflowing_as","","",16,[[]]],[11,"vzip","","",16,[[]]],[11,"from","","",17,[[]]],[11,"into","","",17,[[]]],[11,"to_owned","","",17,[[]]],[11,"clone_into","","",17,[[]]],[11,"try_from","","",17,[[],["result",4]]],[11,"try_into","","",17,[[],["result",4]]],[11,"borrow","","",17,[[]]],[11,"borrow_mut","","",17,[[]]],[11,"type_id","","",17,[[],["typeid",3]]],[11,"checked_as","","",17,[[],["option",4]]],[11,"az","","",17,[[]]],[11,"wrapping_as","","",17,[[]]],[11,"saturating_as","","",17,[[]]],[11,"overflowing_as","","",17,[[]]],[11,"vzip","","",17,[[]]],[11,"from","dumbtls::ciphers::oaep","",19,[[]]],[11,"into","","",19,[[]]],[11,"try_from","","",19,[[],["result",4]]],[11,"try_into","","",19,[[],["result",4]]],[11,"borrow","","",19,[[]]],[11,"borrow_mut","","",19,[[]]],[11,"type_id","","",19,[[],["typeid",3]]],[11,"checked_as","","",19,[[],["option",4]]],[11,"az","","",19,[[]]],[11,"wrapping_as","","",19,[[]]],[11,"saturating_as","","",19,[[]]],[11,"overflowing_as","","",19,[[]]],[11,"vzip","","",19,[[]]],[11,"from","","",35,[[]]],[11,"into","","",35,[[]]],[11,"try_from","","",35,[[],["result",4]]],[11,"try_into","","",35,[[],["result",4]]],[11,"borrow","","",35,[[]]],[11,"borrow_mut","","",35,[[]]],[11,"type_id","","",35,[[],["typeid",3]]],[11,"checked_as","","",35,[[],["option",4]]],[11,"az","","",35,[[]]],[11,"wrapping_as","","",35,[[]]],[11,"saturating_as","","",35,[[]]],[11,"overflowing_as","","",35,[[]]],[11,"vzip","","",35,[[]]],[11,"from","dumbtls::encoding::base64","",22,[[]]],[11,"into","","",22,[[]]],[11,"to_owned","","",22,[[]]],[11,"clone_into","","",22,[[]]],[11,"to_string","","",22,[[],["string",3]]],[11,"try_from","","",22,[[],["result",4]]],[11,"try_into","","",22,[[],["result",4]]],[11,"borrow","","",22,[[]]],[11,"borrow_mut","","",22,[[]]],[11,"type_id","","",22,[[],["typeid",3]]],[11,"checked_as","","",22,[[],["option",4]]],[11,"az","","",22,[[]]],[11,"wrapping_as","","",22,[[]]],[11,"saturating_as","","",22,[[]]],[11,"overflowing_as","","",22,[[]]],[11,"vzip","","",22,[[]]],[11,"from","","",23,[[]]],[11,"into","","",23,[[]]],[11,"to_owned","","",23,[[]]],[11,"clone_into","","",23,[[]]],[11,"try_from","","",23,[[],["result",4]]],[11,"try_into","","",23,[[],["result",4]]],[11,"borrow","","",23,[[]]],[11,"borrow_mut","","",23,[[]]],[11,"type_id","","",23,[[],["typeid",3]]],[11,"checked_as","","",23,[[],["option",4]]],[11,"az","","",23,[[]]],[11,"wrapping_as","","",23,[[]]],[11,"saturating_as","","",23,[[]]],[11,"overflowing_as","","",23,[[]]],[11,"vzip","","",23,[[]]],[11,"from","","",36,[[]]],[11,"into","","",36,[[]]],[11,"to_owned","","",36,[[]]],[11,"clone_into","","",36,[[]]],[11,"try_from","","",36,[[],["result",4]]],[11,"try_into","","",36,[[],["result",4]]],[11,"borrow","","",36,[[]]],[11,"borrow_mut","","",36,[[]]],[11,"type_id","","",36,[[],["typeid",3]]],[11,"checked_as","","",36,[[],["option",4]]],[11,"az","","",36,[[]]],[11,"wrapping_as","","",36,[[]]],[11,"saturating_as","","",36,[[]]],[11,"overflowing_as","","",36,[[]]],[11,"vzip","","",36,[[]]],[11,"from","dumbtls::encoding::hex","",26,[[]]],[11,"into","","",26,[[]]],[11,"to_owned","","",26,[[]]],[11,"clone_into","","",26,[[]]],[11,"to_string","","",26,[[],["string",3]]],[11,"try_from","","",26,[[],["result",4]]],[11,"try_into","","",26,[[],["result",4]]],[11,"borrow","","",26,[[]]],[11,"borrow_mut","","",26,[[]]],[11,"type_id","","",26,[[],["typeid",3]]],[11,"checked_as","","",26,[[],["option",4]]],[11,"az","","",26,[[]]],[11,"wrapping_as","","",26,[[]]],[11,"saturating_as","","",26,[[]]],[11,"overflowing_as","","",26,[[]]],[11,"vzip","","",26,[[]]],[11,"from","dumbtls::hashes::sha1","",37,[[]]],[11,"into","","",37,[[]]],[11,"try_from","","",37,[[],["result",4]]],[11,"try_into","","",37,[[],["result",4]]],[11,"borrow","","",37,[[]]],[11,"borrow_mut","","",37,[[]]],[11,"type_id","","",37,[[],["typeid",3]]],[11,"checked_as","","",37,[[],["option",4]]],[11,"az","","",37,[[]]],[11,"wrapping_as","","",37,[[]]],[11,"saturating_as","","",37,[[]]],[11,"overflowing_as","","",37,[[]]],[11,"vzip","","",37,[[]]],[11,"from","dumbtls::hashes::sha2","",38,[[]]],[11,"into","","",38,[[]]],[11,"to_owned","","",38,[[]]],[11,"clone_into","","",38,[[]]],[11,"try_from","","",38,[[],["result",4]]],[11,"try_into","","",38,[[],["result",4]]],[11,"borrow","","",38,[[]]],[11,"borrow_mut","","",38,[[]]],[11,"type_id","","",38,[[],["typeid",3]]],[11,"checked_as","","",38,[[],["option",4]]],[11,"az","","",38,[[]]],[11,"wrapping_as","","",38,[[]]],[11,"saturating_as","","",38,[[]]],[11,"overflowing_as","","",38,[[]]],[11,"vzip","","",38,[[]]],[11,"new","","",38,[[]]],[11,"update","","",38,[[]]],[11,"chain","","",38,[[]]],[11,"finalize","","",38,[[],["genericarray",3]]],[11,"finalize_reset","","",38,[[],["genericarray",3]]],[11,"reset","","",38,[[]]],[11,"output_size","","",38,[[]]],[11,"digest","","",38,[[],["genericarray",3]]],[11,"finalize_into","","",38,[[["genericarray",3]]]],[11,"finalize_into_reset","","",38,[[["genericarray",3]]]],[11,"update","","",38,[[]]],[11,"finalize_reset","","",38,[[],["box",3]]],[11,"finalize","","",38,[[["box",3]],["box",3]]],[11,"reset","","",38,[[]]],[11,"output_size","","",38,[[]]],[11,"box_clone","","",38,[[],[["box",3],["dyndigest",8]]]],[11,"from","","",39,[[]]],[11,"into","","",39,[[]]],[11,"to_owned","","",39,[[]]],[11,"clone_into","","",39,[[]]],[11,"try_from","","",39,[[],["result",4]]],[11,"try_into","","",39,[[],["result",4]]],[11,"borrow","","",39,[[]]],[11,"borrow_mut","","",39,[[]]],[11,"type_id","","",39,[[],["typeid",3]]],[11,"checked_as","","",39,[[],["option",4]]],[11,"az","","",39,[[]]],[11,"wrapping_as","","",39,[[]]],[11,"saturating_as","","",39,[[]]],[11,"overflowing_as","","",39,[[]]],[11,"vzip","","",39,[[]]],[11,"new","","",39,[[]]],[11,"update","","",39,[[]]],[11,"chain","","",39,[[]]],[11,"finalize","","",39,[[],["genericarray",3]]],[11,"finalize_reset","","",39,[[],["genericarray",3]]],[11,"reset","","",39,[[]]],[11,"output_size","","",39,[[]]],[11,"digest","","",39,[[],["genericarray",3]]],[11,"finalize_into","","",39,[[["genericarray",3]]]],[11,"finalize_into_reset","","",39,[[["genericarray",3]]]],[11,"update","","",39,[[]]],[11,"finalize_reset","","",39,[[],["box",3]]],[11,"finalize","","",39,[[["box",3]],["box",3]]],[11,"reset","","",39,[[]]],[11,"output_size","","",39,[[]]],[11,"box_clone","","",39,[[],[["box",3],["dyndigest",8]]]],[11,"from","","",40,[[]]],[11,"into","","",40,[[]]],[11,"to_owned","","",40,[[]]],[11,"clone_into","","",40,[[]]],[11,"try_from","","",40,[[],["result",4]]],[11,"try_into","","",40,[[],["result",4]]],[11,"borrow","","",40,[[]]],[11,"borrow_mut","","",40,[[]]],[11,"type_id","","",40,[[],["typeid",3]]],[11,"checked_as","","",40,[[],["option",4]]],[11,"az","","",40,[[]]],[11,"wrapping_as","","",40,[[]]],[11,"saturating_as","","",40,[[]]],[11,"overflowing_as","","",40,[[]]],[11,"vzip","","",40,[[]]],[11,"new","","",40,[[]]],[11,"update","","",40,[[]]],[11,"chain","","",40,[[]]],[11,"finalize","","",40,[[],["genericarray",3]]],[11,"finalize_reset","","",40,[[],["genericarray",3]]],[11,"reset","","",40,[[]]],[11,"output_size","","",40,[[]]],[11,"digest","","",40,[[],["genericarray",3]]],[11,"finalize_into","","",40,[[["genericarray",3]]]],[11,"finalize_into_reset","","",40,[[["genericarray",3]]]],[11,"update","","",40,[[]]],[11,"finalize_reset","","",40,[[],["box",3]]],[11,"finalize","","",40,[[["box",3]],["box",3]]],[11,"reset","","",40,[[]]],[11,"output_size","","",40,[[]]],[11,"box_clone","","",40,[[],[["box",3],["dyndigest",8]]]],[11,"from","","",41,[[]]],[11,"into","","",41,[[]]],[11,"to_owned","","",41,[[]]],[11,"clone_into","","",41,[[]]],[11,"try_from","","",41,[[],["result",4]]],[11,"try_into","","",41,[[],["result",4]]],[11,"borrow","","",41,[[]]],[11,"borrow_mut","","",41,[[]]],[11,"type_id","","",41,[[],["typeid",3]]],[11,"checked_as","","",41,[[],["option",4]]],[11,"az","","",41,[[]]],[11,"wrapping_as","","",41,[[]]],[11,"saturating_as","","",41,[[]]],[11,"overflowing_as","","",41,[[]]],[11,"vzip","","",41,[[]]],[11,"new","","",41,[[]]],[11,"update","","",41,[[]]],[11,"chain","","",41,[[]]],[11,"finalize","","",41,[[],["genericarray",3]]],[11,"finalize_reset","","",41,[[],["genericarray",3]]],[11,"reset","","",41,[[]]],[11,"output_size","","",41,[[]]],[11,"digest","","",41,[[],["genericarray",3]]],[11,"finalize_into","","",41,[[["genericarray",3]]]],[11,"finalize_into_reset","","",41,[[["genericarray",3]]]],[11,"update","","",41,[[]]],[11,"finalize_reset","","",41,[[],["box",3]]],[11,"finalize","","",41,[[["box",3]],["box",3]]],[11,"reset","","",41,[[]]],[11,"output_size","","",41,[[]]],[11,"box_clone","","",41,[[],[["box",3],["dyndigest",8]]]],[11,"from","","",42,[[]]],[11,"into","","",42,[[]]],[11,"to_owned","","",42,[[]]],[11,"clone_into","","",42,[[]]],[11,"try_from","","",42,[[],["result",4]]],[11,"try_into","","",42,[[],["result",4]]],[11,"borrow","","",42,[[]]],[11,"borrow_mut","","",42,[[]]],[11,"type_id","","",42,[[],["typeid",3]]],[11,"checked_as","","",42,[[],["option",4]]],[11,"az","","",42,[[]]],[11,"wrapping_as","","",42,[[]]],[11,"saturating_as","","",42,[[]]],[11,"overflowing_as","","",42,[[]]],[11,"vzip","","",42,[[]]],[11,"new","","",42,[[]]],[11,"update","","",42,[[]]],[11,"chain","","",42,[[]]],[11,"finalize","","",42,[[],["genericarray",3]]],[11,"finalize_reset","","",42,[[],["genericarray",3]]],[11,"reset","","",42,[[]]],[11,"output_size","","",42,[[]]],[11,"digest","","",42,[[],["genericarray",3]]],[11,"finalize_into","","",42,[[["genericarray",3]]]],[11,"finalize_into_reset","","",42,[[["genericarray",3]]]],[11,"update","","",42,[[]]],[11,"finalize_reset","","",42,[[],["box",3]]],[11,"finalize","","",42,[[["box",3]],["box",3]]],[11,"reset","","",42,[[]]],[11,"output_size","","",42,[[]]],[11,"box_clone","","",42,[[],[["box",3],["dyndigest",8]]]],[11,"from","","",43,[[]]],[11,"into","","",43,[[]]],[11,"to_owned","","",43,[[]]],[11,"clone_into","","",43,[[]]],[11,"try_from","","",43,[[],["result",4]]],[11,"try_into","","",43,[[],["result",4]]],[11,"borrow","","",43,[[]]],[11,"borrow_mut","","",43,[[]]],[11,"type_id","","",43,[[],["typeid",3]]],[11,"checked_as","","",43,[[],["option",4]]],[11,"az","","",43,[[]]],[11,"wrapping_as","","",43,[[]]],[11,"saturating_as","","",43,[[]]],[11,"overflowing_as","","",43,[[]]],[11,"vzip","","",43,[[]]],[11,"new","","",43,[[]]],[11,"update","","",43,[[]]],[11,"chain","","",43,[[]]],[11,"finalize","","",43,[[],["genericarray",3]]],[11,"finalize_reset","","",43,[[],["genericarray",3]]],[11,"reset","","",43,[[]]],[11,"output_size","","",43,[[]]],[11,"digest","","",43,[[],["genericarray",3]]],[11,"finalize_into","","",43,[[["genericarray",3]]]],[11,"finalize_into_reset","","",43,[[["genericarray",3]]]],[11,"update","","",43,[[]]],[11,"finalize_reset","","",43,[[],["box",3]]],[11,"finalize","","",43,[[["box",3]],["box",3]]],[11,"reset","","",43,[[]]],[11,"output_size","","",43,[[]]],[11,"box_clone","","",43,[[],[["box",3],["dyndigest",8]]]],[11,"from","","",31,[[]]],[11,"into","","",31,[[]]],[11,"try_from","","",31,[[],["result",4]]],[11,"try_into","","",31,[[],["result",4]]],[11,"borrow","","",31,[[]]],[11,"borrow_mut","","",31,[[]]],[11,"type_id","","",31,[[],["typeid",3]]],[11,"checked_as","","",31,[[],["option",4]]],[11,"az","","",31,[[]]],[11,"wrapping_as","","",31,[[]]],[11,"saturating_as","","",31,[[]]],[11,"overflowing_as","","",31,[[]]],[11,"vzip","","",31,[[]]],[11,"from","dumbtls::padding","",44,[[]]],[11,"into","","",44,[[]]],[11,"try_from","","",44,[[],["result",4]]],[11,"try_into","","",44,[[],["result",4]]],[11,"borrow","","",44,[[]]],[11,"borrow_mut","","",44,[[]]],[11,"type_id","","",44,[[],["typeid",3]]],[11,"checked_as","","",44,[[],["option",4]]],[11,"az","","",44,[[]]],[11,"wrapping_as","","",44,[[]]],[11,"saturating_as","","",44,[[]]],[11,"overflowing_as","","",44,[[]]],[11,"vzip","","",44,[[]]],[11,"from","","",45,[[]]],[11,"into","","",45,[[]]],[11,"try_from","","",45,[[],["result",4]]],[11,"try_into","","",45,[[],["result",4]]],[11,"borrow","","",45,[[]]],[11,"borrow_mut","","",45,[[]]],[11,"type_id","","",45,[[],["typeid",3]]],[11,"checked_as","","",45,[[],["option",4]]],[11,"az","","",45,[[]]],[11,"wrapping_as","","",45,[[]]],[11,"saturating_as","","",45,[[]]],[11,"overflowing_as","","",45,[[]]],[11,"vzip","","",45,[[]]],[11,"from","dumbtls::padding::pkcs7","",46,[[]]],[11,"into","","",46,[[]]],[11,"to_owned","","",46,[[]]],[11,"clone_into","","",46,[[]]],[11,"to_string","","",46,[[],["string",3]]],[11,"try_from","","",46,[[],["result",4]]],[11,"try_into","","",46,[[],["result",4]]],[11,"borrow","","",46,[[]]],[11,"borrow_mut","","",46,[[]]],[11,"type_id","","",46,[[],["typeid",3]]],[11,"checked_as","","",46,[[],["option",4]]],[11,"az","","",46,[[]]],[11,"wrapping_as","","",46,[[]]],[11,"saturating_as","","",46,[[]]],[11,"overflowing_as","","",46,[[]]],[11,"vzip","","",46,[[]]],[11,"description","dumbtls::encoding::base64","",22,[[]]],[11,"cause","","",22,[[],[["error",8],["option",4]]]],[11,"fmt","","",22,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",36,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",23,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",22,[[["formatter",3]],[["error",3],["result",4]]]],[11,"clone","","",23,[[],["characterset",4]]],[11,"clone","","",36,[[],["config",3]]],[11,"clone","","",22,[[],["decodeerror",4]]],[11,"eq","","",22,[[["decodeerror",4]]]],[11,"ne","","",22,[[["decodeerror",4]]]],[11,"fmt","dumbtls::encoding::hex","",26,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",26,[[["formatter",3]],[["error",3],["result",4]]]],[11,"clone","","",26,[[],["fromhexerror",4]]],[11,"eq","","",26,[[["fromhexerror",4]]]],[11,"ne","","",26,[[["fromhexerror",4]]]],[11,"reset","dumbtls::hashes::sha2","",41,[[]]],[11,"reset","","",40,[[]]],[11,"reset","","",42,[[]]],[11,"reset","","",39,[[]]],[11,"reset","","",38,[[]]],[11,"reset","","",43,[[]]],[11,"default","","",39,[[],["sha256",3]]],[11,"default","","",40,[[],["sha384",3]]],[11,"default","","",43,[[],["sha512trunc256",3]]],[11,"default","","",38,[[],["sha224",3]]],[11,"default","","",41,[[],["sha512",3]]],[11,"default","","",42,[[],["sha512trunc224",3]]],[11,"fmt","","",39,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",41,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",38,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",43,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",40,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",42,[[["formatter",3]],[["error",3],["result",4]]]],[11,"finalize_into_dirty","","",43,[[["genericarray",3]]]],[11,"finalize_into_dirty","","",39,[[["genericarray",3]]]],[11,"finalize_into_dirty","","",41,[[["genericarray",3]]]],[11,"finalize_into_dirty","","",40,[[["genericarray",3]]]],[11,"finalize_into_dirty","","",42,[[["genericarray",3]]]],[11,"finalize_into_dirty","","",38,[[["genericarray",3]]]],[11,"update","","",43,[[]]],[11,"update","","",41,[[]]],[11,"update","","",38,[[]]],[11,"update","","",40,[[]]],[11,"update","","",42,[[]]],[11,"update","","",39,[[]]],[11,"clone","","",38,[[],["sha224",3]]],[11,"clone","","",40,[[],["sha384",3]]],[11,"clone","","",43,[[],["sha512trunc256",3]]],[11,"clone","","",41,[[],["sha512",3]]],[11,"clone","","",39,[[],["sha256",3]]],[11,"clone","","",42,[[],["sha512trunc224",3]]],[11,"write","","",43,[[],[["result",4],["error",3]]]],[11,"flush","","",43,[[],[["error",3],["result",4]]]],[11,"write","","",38,[[],[["result",4],["error",3]]]],[11,"flush","","",38,[[],[["error",3],["result",4]]]],[11,"write","","",41,[[],[["result",4],["error",3]]]],[11,"flush","","",41,[[],[["error",3],["result",4]]]],[11,"write","","",40,[[],[["result",4],["error",3]]]],[11,"flush","","",40,[[],[["error",3],["result",4]]]],[11,"write","","",39,[[],[["result",4],["error",3]]]],[11,"flush","","",39,[[],[["error",3],["result",4]]]],[11,"write","","",42,[[],[["result",4],["error",3]]]],[11,"flush","","",42,[[],[["error",3],["result",4]]]],[11,"get_block_size","dumbtls::ciphers::aes","",1,[[["bytes",6]]]],[11,"encrypt_block","","",1,[[["bytes",6]],[["bytes",6],["aeserror",4],["result",4]]]],[11,"decrypt_block","","",1,[[["bytes",6]],[["bytes",6],["aeserror",4],["result",4]]]],[11,"encrypt_block","dumbtls::ciphers::feistel","Encrypt the given plaintext.",10,[[["bytes",6]],[["bytes",6],["feistelresult",6]]]],[11,"decrypt_block","","Decrypt the given ciphertext.",10,[[["bytes",6]],[["bytes",6],["feistelresult",6]]]],[11,"get_block_size","","",10,[[["bytes",6]]]],[11,"get_num_rounds","dumbtls::ciphers::des","",8,[[["bytes",6]]]],[11,"get_block_size","","",8,[[["bytes",6]]]],[11,"derive_round_subkey","","",8,[[],[["bytes",6],["feistelresult",6]]]],[11,"round_function","","",8,[[["bytes",6]],[["bytes",6],["feistelresult",6]]]],[11,"pre_encrypt_block","","",8,[[["bytes",6]]]],[11,"post_encrypt_block","","",8,[[["bytes",6]]]],[11,"is_valid_plaintext_block","","",8,[[["bytes",6]],["feistelresult",6]]],[11,"split_plaintext","","",8,[[["bytes",6]]]],[11,"is_valid_ciphertext_block","","",8,[[["bytes",6]],["feistelresult",6]]],[11,"split_ciphertext","","",8,[[["bytes",6]]]],[11,"get_num_rounds","dumbtls::ciphers::oaep","",19,[[["bytes",6]]]],[11,"get_block_size","","",19,[[["bytes",6]]]],[11,"derive_round_subkey","","",19,[[],[["bytes",6],["feistelresult",6]]]],[11,"round_function","","",19,[[["bytes",6]],[["bytes",6],["feistelresult",6]]]],[11,"is_valid_plaintext_block","","",19,[[["bytes",6]],["feistelresult",6]]],[11,"pre_encrypt_block","","",19,[[["bytes",6]]]],[11,"split_plaintext","","",19,[[["bytes",6]]]],[11,"post_encrypt_block","","",19,[[["bytes",6]]]],[11,"is_valid_ciphertext_block","","",19,[[["bytes",6]],["feistelresult",6]]],[11,"pre_decrypt_block","","",19,[[["bytes",6]]]],[11,"split_ciphertext","","",19,[[["bytes",6]]]],[11,"post_decrypt_block","","",19,[[["bytes",6]]]],[11,"get_modulus","dumbtls::ciphers::rsa","",13,[[],["integer",3]]],[11,"get_exponent","","",13,[[],["integer",3]]],[11,"get_size","","",13,[[],["rsakeysize",4]]],[11,"get_size_bytes","","",13,[[]]],[11,"get_modulus","","",14,[[],["integer",3]]],[11,"get_exponent","","",14,[[],["integer",3]]],[11,"get_size","","",14,[[],["rsakeysize",4]]],[11,"get_size_bytes","","",14,[[]]],[11,"generate_mask","dumbtls::ciphers::oaep","",35,[[["bytes",6]],[["rsaresult",6],["bytes",6]]]],[11,"from_base64","dumbtls","",47,[[],[["base64decodeerror",4],["result",4],["bytes",6]]]],[11,"from_base64_config","","",47,[[["config",3]],[["base64decodeerror",4],["result",4],["bytes",6]]]],[11,"to_base64","","",47,[[],["string",3]]],[11,"to_base64_config","","",47,[[["config",3]],["string",3]]],[11,"from_hex","","",47,[[],[["result",4],["bytes",6],["hexdecodeerror",4]]]],[11,"to_hex","","",47,[[],["string",3]]],[11,"to_hex_upper","","",47,[[],["string",3]]],[11,"hash","dumbtls::hashes::sha1","",37,[[["bytes",6]],["bytes",6]]],[11,"output_size","","",37,[[]]],[11,"max_input_size","","",37,[[]]],[11,"hash","dumbtls::hashes::sha2","",31,[[["bytes",6]],["bytes",6]]],[11,"output_size","","",31,[[]]],[11,"max_input_size","","",31,[[]]],[11,"pad","dumbtls::padding","",44,[[["bytes",6]]]],[11,"unpad","","",44,[[["bytes",6]]]],[11,"pad","","",45,[[["bytes",6]]]],[11,"unpad","","",45,[[["bytes",6]]]],[11,"clone","dumbtls::bytes","",34,[[],["xorlengtherror",3]]],[11,"clone","dumbtls::ciphers::aes","",2,[[],["aeserror",4]]],[11,"clone","","",3,[[],["aeskeysize",4]]],[11,"clone","","",4,[[],["aeskey",4]]],[11,"clone","dumbtls::ciphers::feistel","",11,[[],["feistelciphererror",4]]],[11,"clone","dumbtls::ciphers::rsa","",16,[[],["rsakeysize",4]]],[11,"clone","","",13,[[],["rsaprivatekey",3]]],[11,"clone","","",14,[[],["rsapublickey",3]]],[11,"clone","","",15,[[],["rsakeypair",3]]],[11,"clone","","",17,[[],["rsaerror",4]]],[11,"clone","dumbtls::padding::pkcs7","",46,[[],["invalidpadding",3]]],[11,"fmt","dumbtls::bytes","",34,[[["formatter",3]],["result",6]]],[11,"fmt","dumbtls::ciphers::aes","",2,[[["formatter",3]],["result",6]]],[11,"fmt","","",3,[[["formatter",3]],["result",6]]],[11,"fmt","","",4,[[["formatter",3]],["result",6]]],[11,"fmt","dumbtls::ciphers::feistel","",11,[[["formatter",3]],["result",6]]],[11,"fmt","dumbtls::ciphers::rsa","",16,[[["formatter",3]],["result",6]]],[11,"fmt","","",13,[[["formatter",3]],["result",6]]],[11,"fmt","","",14,[[["formatter",3]],["result",6]]],[11,"fmt","","",15,[[["formatter",3]],["result",6]]],[11,"fmt","","",17,[[["formatter",3]],["result",6]]],[11,"fmt","dumbtls::padding::pkcs7","",46,[[["formatter",3]],["result",6]]],[11,"fmt","dumbtls::bytes","",34,[[["formatter",3]],["result",6]]],[11,"fmt","dumbtls::padding::pkcs7","",46,[[["formatter",3]],["result",6]]],[11,"new","dumbtls::ciphers::feistel","Create a new instance of the DES cipher.",10,[[["bytes",6]],["des",6]]],[11,"new","dumbtls::encoding::base64","Create a new `Config`.",36,[[["characterset",4]],["config",3]]],[11,"pad","","Sets whether to pad output with `=` characters.",36,[[],["config",3]]],[11,"decode_allow_trailing_bits","","Sets whether to emit errors for nonzero trailing bits.",36,[[],["config",3]]]],"p":[[8,"SequenceXor"],[3,"AES"],[4,"AESError"],[4,"AESKeysize"],[4,"AESKey"],[3,"ECBMode"],[3,"CBCMode"],[8,"BlockCipher"],[3,"DESBlock"],[6,"DES"],[3,"FeistelNetwork"],[4,"FeistelCipherError"],[8,"FeistelCipher"],[3,"RSAPrivateKey"],[3,"RSAPublicKey"],[3,"RSAKeypair"],[4,"RSAKeysize"],[4,"RSAError"],[8,"RSAKey"],[3,"OAEPBlock"],[8,"MaskGenerationFunction"],[6,"OAEP"],[4,"DecodeError"],[4,"CharacterSet"],[8,"FromBase64"],[8,"ToBase64"],[4,"DecodeError"],[13,"InvalidHexCharacter"],[8,"FromHex"],[8,"ToHex"],[8,"Digest"],[3,"Sha2"],[8,"HashFunction"],[8,"PaddingScheme"],[3,"XorLengthError"],[3,"MGF1"],[3,"Config"],[3,"Sha1"],[3,"Sha224"],[3,"Sha256"],[3,"Sha384"],[3,"Sha512"],[3,"Sha512Trunc224"],[3,"Sha512Trunc256"],[3,"PKCS7"],[3,"NULL"],[3,"InvalidPadding"],[6,"Bytes"]]}\
}');
addSearchOptions(searchIndex);initSearch(searchIndex);